Let 1
* Internets
    * End systems（edge） + links + routers（core）
    * Interconnected ISPs
* Protocol
    * Request + response
    * Formats of exchanging the messages + actions 
    * How the message exchanging process is formatted in one process( SMTP, HTTP, TCP, UDP, POP)
* Access networks:
    * DSL:use telephone line (telephone network)
    * Cable: use cable(TV), share one access network
    * wireless
* Hosts(function)
    * Sending, break into packets , L(bits), R(transmission rate) L/R transmission delay
* Switching:
    * Packet-switching(On demand allocation)
Store and forward: takes all before transmit, takes L/R to push out one packet
    * Circuit switching(reserved resources)
        * Must allocate one resource for end to end.
            * FDM, TDM
    * Queue and lost: 
                    Router has a queue to hold the packets
    * Packet Switching vs circuit switching
        * Packets
            * What is it
                * In packet-based networks,  the message gets broken into small data packets.  
                * These packets are sent out from the computer and they travel around the network seeking out the most efficient route to travel as circuits become available.  
                * This does not necessarily mean that they seek out the shortest route.
                * Each packet may go a different route from the others
            * Pros 
                * Security
                * Bandwidth used to full potential
                * Devices of different speeds can communicate 
                * Not affected by line failure (redirects signal)
                * Availability – no waiting for a direct connection to become available
            * Cons
                * Under heavy use there can be a delay
                * Data packets can get lost or become corrupted
                * Protocols are needed for a reliable transfer
        * Circuits 
            * What is it
            * pros
                * Circuit is dedicated to the call – no interference, no sharing
                * Guaranteed the full bandwidth for the duration of the call
                * Guaranteed quality of service
            * Cons 
                * Inefficient – the equipment may be unused for a lot of the call; if no data is being sent, the dedicated line still remains open.
                * It takes a relatively long time to set up the circuit.
                * During a crisis or disaster, the network may become unstable or unavailable.
                * It was primarily developed for voice traffic rather than data traffic.
        * Bandwidth -> it is for the transmission rate ( transmission delay )
        * HW calculation
* Network core 
    * Routing : determine the road
    * Forwarding : move to the next station
Lec2
* ISP
    * Connect all the network together -> network of networks
* Delays:
    * Nodal processing
    * Queuing delay(vary): depends on a(average packet arrival rate)
    * Transmission delay(push out): L/R.  -> router往link里发是有一定速度的
    * Propogation delay(time on the link):  -> 扔出来后一个bit在link里跑的时间
* Throughput:
    * The transfer rate between sender and receiver
* Layering:
    * 5 layers
    * App: support  applications
    * Transport: support data transfer
    * Network: routing
    * link: (no idea)
    * Physical: bits
* Security:
    * Dos:、
* 1M = 10^6
Lec3
* Application:
    * run on.different end systems
    * Communicate through network
* Architecture:
    * Client-server: server(may be data centers) wait for call(from clients)
    * P2P: peer request and also provide service
* Process (running programs)
    * Communicate through messages (defined by protocols）
    * Socket: A door send message or receive message
    * Process address: IP: host address , port numbers(services):
        * IP address: 128.119.245.12
        * port number: 80
* Transport service:
    * Data integrity, timing, throughput, security
* TCP, UDP (tranport protocol)
    *  TCP: data reliable, flow control, congestion control, connection-oriented.
        * Will send a message back to ensure it gets the packet
    * UDP: not reliable, but with high speed
        * Won’t send
* Securing 
    * SSL TCP and UDP do not have security
* HTTP
    * client-server
        * Initiate TCP connection
        * accepts
        * Exchange message 
        * Closes
    * Two different
        * Non-persistent( one object each time)
            * Response time: 2RTT + transmutation time for one object
            * Process
                * Initiate on a IP + port (Client)
                * Server at the port accepts the connection (Server)
                * Send request (Client)
                * Receive the message, forms a response message and send to the socke (S)
                * Close TCP connection (S)
                * Receive the object (Client)
        * Persistent (multiple objects each time)
            * 1RTT for connection
            * 1RTT for all objects
Lec 4
* Message Formats
    * request
        * Requestline + Headerline + Body
        * Post, Get: post send message from the body, get from the URL 
        * What it is like
            * GET /index.html HTTP/1.1\r\n
            * Host: www-net.cs.umass.edu\r\n
            * User-Agent: Firefox/3.6.10\r\n
            * Accept: text/html,application/xhtml+xml\r\n
            * \r\n
            * body
    * response
        * Status code (for information)
        * What it is like
            * HTTP/1.1 200 OK\r\n
            * Date: Sun, 26 Sep 2010 20:09:20 GMT\r\n 
            * Server: Apache/2.0.52 (CentOS)\r\n 
            * Last-Modified: Tue, 30 Oct 2007 17:00:02 GMT\r\n
            * \r\n
            * data data data data data ..
    * Cookies (for user-server state) (whiten http message)
        * SET COOKIE (from server response) in the same time create ID in cookie database
        * Next time ( server will know more about you clients):
            * Request with cookie will get cookie action
* Caches ( satisfy the request but without using the origin server which is slow)
    * First send the request to the proxy server
    * Get the response from proxy server, if not get , send the request to the original server and get it from there
Lec5
* E-mail
    * User-agent: 
    * Mail servers:
        * Contains messages
        * Message queue for outgoing messages
        * SMTP: sending servers( clients), receiving servers (servers)
    * Scenario
        * A sends to B
        * A’s UA sends the e-mail to the mail server, put it in the message queue
        * Client opens TCP connection with B server
        * Using SMTP, A sends message to B over the TCP
        * B place it in the mailbox
        * The user can see the e-mail from the user-agent
    * SMTP format
        * To  \r\n
        * From \r\n
        * Subject \r\n
        * \r\n
        * Body 
    * USE TCP
    * Mail Access protocols: -> retrieval from server
        * POP IMAP HTTP
* DNS -> use 1 RTT
    * DNS goals 
        * Host name to IP
        * Host aliasing
        * One host name to many iPs (load distribution)
    * Process:
        * Basic process
            * Root -> .com.            
            * Com -> amazon.com (TLD) 
            * Amazon.com -> IP NS amazon.com, dns.amazon.com and A dns.amazon.com, 123124.324
        * Two different process
            * Iterative (I don’t know ,ask him plz)
            * Recursive( I will help you ask him and get it back to you)
    * DNS records
        * A : hostname -> IP
        * NS: domain -> hostname
        * CNAME: alias name -> real name
        * MX: mail server
    * How to insert one domain:
        * Server and ip + names
        * Insert RRs in TLD server ns+a、
        * A record and MX record in authoritative
    * DNS protocols
        * 
        * If Type=A, then Name is a hostname and Value is the IP address for the hostname. Thus, a Type A record provides the standard hostname-to-IP address mapping. As an example,
        * (relay1.bar.foo.com, 145.37.93.126, A) is a Type A record.
        * (foo.com, dns.foo.com, NS)
        * If Type=CNAME, then Value is a canonical hostname for the alias hostname Name. This record can provide querying hosts the canonical name for a hostname. As an example, (foo.com, relay1.bar.foo.com, CNAME) is a CNAME record.  Foo canonical name, relay1.bar.foo real name 
Lec 6
* Client-server.  
* P2P.                Dp2p
    * C-S
    * P2P
* Bitorrent
    * File will be divided into 256kb chunks
    * The tracker randomly select a subset of peers
    * At any time, A will ask the chunks they have. And request using tcp connections for chunks he doesn’t have.
    * Which chunk to request first, which neighbors should he request ? Which she should respond to?
        * Requesting
            * Ask for the chunks that are rarest (least copies in neighbors) -> redistributed quickly
        * Sending
            * Give priority to the neighbors which supply data In the highest rate.(top 4) 
            * Also randomly choose one neighbor to supply data. -> for those who just be in the network.
* DHT(X)
Lec 7
* Video streaming
    * DASH
        * SERVER
            * Divide into chunks
            * Each chunk encoded in different rates.
            * URL for each chunk
        * CLIENT
            * Measure bandwidth
            * Request one chunk one time: choose the max coding rate based on the bandwidth
    * Client strategy
        * When to request
        * Coding rate choice
        * Where to request: choose the highest bandwidth server
    * CDN ( store  multiple copies of videos at different sites )
        * Push deep ( near users)
    * CDN example
        * Store one copy to different nodes
        * Client retrieve content from different nodes
    * CDN content access:
        1. Get the URL for the video
        2. DNS -> IP(KING CDN)
        3. Request KING CDN server
    * Server selection startegy
        * Learns the IP of bob
        * Assign bob to the server which is closest  ( geo database)
    * Netflix ( Using amazon cloud )
        * Amazon cloud: contains webpage + videos in different rates
        * Uploads videos to CDN
        * Cloud determine the best CDN for the request
        * Send manifest and CDN IP to client
        * Client CDN interact using DASH
Lec 8
* Overview
    * Network layer: communication between host
    * Transport layer: logical communication between processes
    * Process
        * Break the app message into segments
        * Sending: add tcp headers(UDP-> start port dest port) 
        * Recieving: use the headers to send the segments to the dest port.
* Multiplexing and demultiplexing
    * UDP say it once ppt ( datagram = IP,  segment is carried in the datagram 1 - 1) 
        * Defined by (start, dest)
        * Demultiplex: check port num, directs the segment to the port.
        * One port one socket.
    * TCP say it once
        * Defined by( source IP, source port, dest iP, dest port)
        * One port -> more than one sockets.
* UDP checksum
    * Sender: Create a checksum in the UDP checksum field
    * Receiver: compute the checksum and get if it has error.
    * How
Lec 9
* Principles of reliable data transfer（通过udt sender 和 receiver之间通信实现rdt）
    * Rdt_send() use data for app (when app has data, it will send it)
    * udt_send() use data from transport layer(packet)(data will be broke into packets)
    * rdt(udt)_rcv() use packets (when there is packet it will receive)
    * Rdt_rcv() -> transfer packets to data -> deliver_data() to the upper. 
* protocals(用udt_send完成rdt_send)
    * What it does 
    * Sender use udt_sned to get rdt_send function
        * Make the pkt
        * Create a fsm to handle different proce
    * Receiver use rdt_rcv() which is not rdt to extract the ensured data and get it to deliver_data(data)
    * 1.0
        * No errors, no loss
        * Easy one
    * 2.0
        * Errors -> need to be detected
        * Sender:
            * Send with checksum -> wait for ack
            * Wait if error -> re_send, 
            * with no error -> done -> wait.
        * Receiver:
            * Sendback NAK 
            * Or send back ack and extract packets and send the data.
    * 2.1
        * Ack/nak corrupted
        * Use sequence number to each ppt.
        * Receiver discards duplicate pkt.
        * Sender:(can detect if the nak or ack is corrupted)
            * Send (state, data, checksum) -> 0 
            * Get (nak or ack + checksum find if is corrupted or nak) -> resend
            * Ack + not corrupted -> 1 state
        * Receiver: (send checksum for nak and ack) 
            * Corrupted -> send nak
            * Not corrupted + not same state -> ack corrupt -> resend 
            * Not currupt + same state -> right -> extract + deliver + send ack.
    * 2.2
        * Nak-freed
        * Receiver sends ack for last pkt received OK.
        * Sender:
            * When state 1 is done -> send ACK1
            * When state 0 is corrupted -> send ACK1
    * 3.0
        * May lose packets
        * Sender waits about of time for ack
            * Retransmits if no ack received 
            * If actually not lost, the receiver must handle it.
        * Sender:
            * Timeout, start_timer
            * Time out if for ack + pkt
        * performance
            * It is stopped and waited -> low performance
    * pipelining
Lec 10
* Go-back N
    * Sender send n unacked packets in pipeline
    * Sends ack for those
    * Timer expires, resend all unacked packets
* Selective repeat
    * Sender have n
    * Sends individual ack
* Go-back-n must practice
* 
    * Timer:
        * single timer, which can be thought of as a timer for the oldest transmitted but not yet acknowledged packet 
    * Window -> have n unacked pkts.
        * Sent not acked
        * Not sent but can be sent
    * Sender:
        * Sned the window size packets, one by one
        * If it is acked then base ++ and window is sliding. -> send next
        * Will ignore the duplicate ack
        * When there is a not acked, the window will not move, all other packet will be discarded. Then timeout, all window size will be sent again.
    * Receiver:
        * If there is a loss, it will always resend the last id.
* Selective repeat
    * Receiver 
        * pkt n in [rcvbase, rcvbase+N-1]
            *  send ACK(n)
            *  out-of-order: buffer
            *  in-order: deliver (also deliver buffered, in-order pkts), advance window to next not-yet-received pkt
        * pkt n in [rcvbase-N,rcvbase-1]
            *  ACK(n) otherwise:
            *  ignore
    * Sender
        * data from above:
            *  if next available seq # in window, send pkt
        * timeout(n):
            *  resend pkt n, restart timer
        * ACK(n) in [sendbase,sendbase+N]:
            *  mark pkt n as received
            *  if n smallest unACKed pkt, advance window base to next unACKed seq #
    * Why we must send the ack we have sent before.
        * It moves forward, then if we don’t send the already asked ones(which may be lost)
* TCP
* 
        * RTT = (d proc + d prog + d queue) * 2
    * overview
        * Point to point, reliable, pipelined, full duplex data, connection-oriented (hand-shaking before exchanging)
    * TCP send buffer, receive buffer
        * Client data + tcp header  -> tcp segment -> passed to network laye
    * Segment structure
        * Make pkt步骤中加入headers,加在app data前面（使得我可以使用tcp protocal）
            * MSS -> limit the max bytes of the segment
        * The meaning of the headers
            * Seq num, ack num -> implement reliable data transfer
            * Receive window -> the receiver’s window size
            * SYN, FIN-> connection
        * Structure
            * Seq_num = packet num 
        * How the TCP works
        * 
    * Round time sett
    * Reliable data transfe
        * 3 cases
        * 
    * 
    * 
        * sender (can know what has been received by ack) -> will not resend segment which is lower than the ack num.
            * data rcvd from app:
                *  create segment with seq #
                *  seq # is byte-stream number of first data byte in segment
                *  start timer if not already running
                    * • think of timer as for oldest unacked segment
                    * • expiration interval: TimeOutInterval
            * timeout:
                *  retransmit segment that caused timeout
                *  restart timer ack rcvd:
                *  if ack acknowledges previously unacked segments
                    * • update what is known to be ACKed
                    * • start timer if there are still unacked segments
                    * It will double the timeout 
        * Receiver:(will always send the last in order seqnum that has Been recieved)
            * It will transmit last in order seq that has been received
    * Fast retransmit
    * 
        * timeout(long period)
        * 3 duplicate acts (do not need to wait until there is a timeout)
    * Flow control -> eliminate the possibility of the sender overflowing the receiver’s buffer
        * What is flow control
            * Tcp receiver delivers more -> buffer boom
            * Receiver controls sender, so sender won’t overflow.
        * How 
            * Free buffer space in tcp header
        * Rwnd = spare room in buffer -> send back to A, keep unack data < rwnd ->  B is not overflowing
    * Connection management
        * Handshake
            * why no two handshkes
                * 如果旧的包过来之后，server端发送ack之后直接建立连接，但是旧的连接不是真正想要建立的，A不会发数据，B就会一直等着
                * 如果加了第三次握手，如果是旧的，A 就会发送reset， 让B重新变成listen状态..-> 从而和想要建立连接的client建立连接.
            * 1. SYN =1 ,chooses client_isn -> seq_num(client) ,no app data
            * 2. SYN = 1, ACK = client_isn +1, chooses client_isn -> seq_num(sever)
                * Start connecting,I received your packet, start with client_isn (ACK)
                * My own is client_isn(server)
            * 3.SYN = 0, ACK = client_isn(server) +1 
                * I have received your acknowgment
            * -> DATA -> SYN =0 has data in it
        * Close
            * Client sends FIN=1
            * Server sends ACK
            * Server sends FIN=1
            * Client sends ACK
        * Sates
    * Congestion control
        * case1
            * 
        * case2 -> A can know whether the buffer is free, only send when it is free (no loss)
                                         -> A can know whether it will lose, resend when lose -> loss 
                                            -> prematurely retransmit -> unneeded retransmission 
            * 
            * 
        * Difference with flow control:
            * Flow control:
                * Sender get too much data to the receiver
            * Congestion control
                * Traffic in the network-> prevent the network being congested by the data sent by  sender.
        * Too many sources sending data too fast, the network can not handle.
        * How ->
            * Cwnd -> congestion window -> at most sender can send 
            * Slow start:
                * Every RTT -> double the cwnd
                * After ssthresh -> grow linear 
            * Loss detect:
                * Timeout -> cwnd set to 1MSS
                * 3 ack -> cut into half
            * Sshresh:
                * Set a ssthresh -> 
                * When loss happens set ssthresh to 1/2 of the MSS
            * TCP fair
                * Additive addition
                * Decrease
            * Tahoe -> always set to 1
            * Reno -> duplicate -> set to half
            * AIMD
                * 
                * When there is a timeout or duplicate acks -> ssh = cwnd/2
                * Timeout -> slowstart  cwnd = 1
                * 3duplicate -> cwnd = 1/2 cwnd, grow linear
* Check sum
    * 
    * Service: logical communication.   Process to process(it is  in the application layer’s view) actually it is the network layer to send data between hosts)
    * Protocols:
        * Send: message -> segments.  Break down and add headers
        * Receive: segments -> message.
    * Relationship between network layer:
        * Process to process vs. host to host. 
        * process -> transport layer -> network -> in some manner -> network -> transport -> process
    * UDP TCP:
        * Network: IP best effort delivery service
        * Service model -> 1 has lots of sockets and 
            * multiplexing      send each chunk to the right socket.
            * Demultiplexing   gathering the sockets data chunks  pass it to network to send to another host.
* Multiplexing and Demultiplexing
    * How
        * UDP start port + dest port -> check the dest port -> go to the right port
            * Stort port is for sending back
            * One port a lot of ports send to it
        * TCP  4 items define a tupe = one socket (2 IP + 2 port)
                * Give each process one socket
* UDP:
    * benefits
        * No connection establishment
        * simple
        * Smal header size
        * aQCheck sum:
        * Used for checking
